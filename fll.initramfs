#!/bin/sh
#
# F.U.L.L.S.T.O.R.Y initramfs live media mount script
#
# Copyright: (C) 2025, Kel Modderman <kelvmod@gmail.com>
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# https://github.com/fullstory
#
# This script:
#  * inspects a block device/partition for the UUID of the carrier
#    filesystem (iso9660) containing the readonly rootfs images
#  * mounts readonly rootfs and sets up COW/tmpfs overlay
#  * creates a symlink to the readonly rootfs image for use by calamares
#  * create udev rule for persistent symlink to device live media was found on
#  * updates live username variable if given on boot cmdline
#  * configures live hostname, timezone, and getty

[ -n "${ID_FS_TYPE}" ] || ID_FS_TYPE="$(blkid -s TYPE -o value ${DEVNAME})"

case "${ID_FS_TYPE}" in
    iso9660|ext*|btrfs|xfs)
        :
        ;;
    *)
        exit 1
        ;;
esac

[ -n "${ID_FS_UUID}" ] || ID_FS_UUID="$(blkid -s UUID -o value ${DEVNAME})"

# source distro-defaults
[ -s /etc/default/distro ] && . /etc/default/distro

FLL_CHECKSUM_CHECK="no"

# parse fll options given on cmdline
for opt in $(cat /proc/cmdline); do
    case "${opt}" in
        fll=debug)
            set -x
            ;;
        fromiso=*)
            FLL_MEDIA_NAME="${opt#fromiso=}"
            ;;
        fromhd=*)
            # support for grub2-fll-fromiso: if fromhd=UUID= is provided
            # then only accept block devices with matching ID_FS_UUID.
            FLL_FROMHD="${opt#fromhd=}"
            [ "${FLL_FROMHD}" = "UUID=${ID_FS_UUID}" ] || exit 1
            ;;
        hostname=*)
            CUSTOM_HOSTNAME="${opt#hostname=}"
            ;;
        image_dir=*)
            FLL_IMAGE_DIR="${opt#image_dir=}"
            FLL_IMAGE_LOCATION="${FLL_IMAGE_DIR}/${FLL_IMAGE_FILE}"
            ;;
        image_name=*)
            FLL_IMAGE_FILE="${opt#image_name=}"
            FLL_IMAGE_LOCATION="${FLL_IMAGE_DIR}/${FLL_IMAGE_FILE}"
            ;;
        sha256sum|sha256sums|checksum|checksums)
            FLL_CHECKSUM_CHECK="yes"
            ;;
        tz=*)
            CUSTOM_TZ="${opt#tz=}"
            ;;
        username=*)
            FLL_LIVE_USER="${opt#username=}"
            ;;
        utc=yes)
            UTC="yes"
            ;;
        utc|gmt)
            CUSTOM_TZ="Etc/UTC"
            ;;
        uuid=*)
            FLL_UUID="${opt#uuid=}"
            ;;
    esac
done

FLL_ROOTFS_MNT="${rootmnt:-/root}"
FLL_READONLY_MNT="/fll/${FLL_UUID}"
FLL_BLOCKDEV_MNT="/fll/${DEVNAME#/dev/}"
# exit if we've already probed this device before
[ -d "${FLL_BLOCKDEV_MNT}" ] && exit 1
mkdir -p "${FLL_BLOCKDEV_MNT}"

mkdir -p "${FLL_BLOCKDEV_MNT}" "${FLL_READONLY_MNT}"
mount -t "${ID_FS_TYPE}" -o ro "${DEVNAME}" "${FLL_BLOCKDEV_MNT}"
# iso9660 filesystem on block device (cd/dvd/usb)
if [ "${ID_FS_UUID}" = "${FLL_UUID}" ] && [ -f "${FLL_BLOCKDEV_MNT}/${FLL_IMAGE_LOCATION}" ]; then
    FLL_ISOMEDIA_MNT="${FLL_BLOCKDEV_MNT}"
# iso file on filesystem (fromiso=)
elif [ -f "${FLL_BLOCKDEV_MNT}/${FLL_MEDIA_NAME#/}" ] && \
     [ "$(blkid -s UUID -o value ${FLL_BLOCKDEV_MNT}/${FLL_MEDIA_NAME#/})" = "${FLL_UUID}" ]; then
    FLL_ISOMEDIA_MNT="/fll/fromiso"; mkdir -p "${FLL_ISOMEDIA_MNT}"
    mount -t iso9660 -o ro "${FLL_BLOCKDEV_MNT}/${FLL_MEDIA_NAME#/}" "${FLL_ISOMEDIA_MNT}"
# no iso media detected by UUID
else
    umount "${FLL_BLOCKDEV_MNT}"
    exit 1
fi

# check integrity of live media if requested
if [ "${FLL_CHECKSUM_CHECK}" = "yes" ] && ! ( cd "${FLL_ISOMEDIA_MNT}" && sha256sum -c "sha256sums" ); then
    printf "ERROR: sha256sum check failed\n"
    exit 1
fi

# mount readonly rootfs
FLL_READONLY_FSTYPE="$(blkid -s TYPE -o value ${FLL_ISOMEDIA_MNT}/${FLL_IMAGE_LOCATION})"
mount -t "${FLL_READONLY_FSTYPE}" -o ro "${FLL_ISOMEDIA_MNT}/${FLL_IMAGE_LOCATION}" "${FLL_READONLY_MNT}"

# prepare COW/tmpfs union filesystem
FLL_UNION_MODULE="overlay"
FLL_UNION_COWDIR="/fll/cow"
FLL_UNION_OPTIONS="lowerdir=${FLL_READONLY_MNT},upperdir=${FLL_UNION_COWDIR}/upper,workdir=${FLL_UNION_COWDIR}/work"
modprobe "${FLL_UNION_MODULE}"
mkdir -p "${FLL_UNION_COWDIR}"
mount -n -t tmpfs -o size=90%,mode=755 tmpfs "${FLL_UNION_COWDIR}"
mkdir -p "${FLL_UNION_COWDIR}/upper" "${FLL_UNION_COWDIR}/work"
mount -t "${FLL_UNION_MODULE}" -o "${FLL_UNION_OPTIONS}" "${FLL_UNION_MODULE}" "${FLL_ROOTFS_MNT}"

# create /fll and migrate mountpoints
mkdir -p "${FLL_ROOTFS_MNT}/fll"
for mnt in ${FLL_READONLY_MNT} ${FLL_UNION_COWDIR} ${FLL_BLOCKDEV_MNT} ${FLL_ISOMEDIA_MNT}; do
    if grep -q "${mnt}" /proc/mounts; then
        # create symlink to readonly rootfs for calamares
        if [ -f "${mnt}/${FLL_IMAGE_LOCATION}" ]; then
            ln -sf "${mnt}/${FLL_IMAGE_LOCATION}" "${FLL_ROOTFS_MNT}/fll/${FLL_READONLY_FSTYPE}"
        fi
        mkdir -p "${FLL_ROOTFS_MNT}${mnt}"
        mount -n -o move "${mnt}" "${FLL_ROOTFS_MNT}${mnt}"
    fi
done

# update calamares unpackfs.conf with readonly fstype
if [ -f "${FLL_ROOTFS_MNT}/etc/calamares/modules/unpackfs.conf" ]; then
    sed -i "s/FLL_READONLY_FSTYPE/${FLL_READONLY_FSTYPE}/" \
        "${FLL_ROOTFS_MNT}/etc/calamares/modules/unpackfs.conf"
fi

# prepare /dev /media /proc and /sys
for dir in dev media proc run sys; do
    mkdir -p -m 0755 "${FLL_ROOTFS_MNT}/${dir}"
done

# tmp with correct permissions for users
mkdir -p -m 1777 "${FLL_ROOTFS_MNT}/tmp"

# create udev rule for persistent symlink to device live media was found on
printf "KERNEL==\"%s\", SYMLINK+=\"fll\"\n" \
    "${DEVNAME#/dev/}" >  ${FLL_ROOTFS_MNT}/etc/udev/rules.d/70-fll-live.rules
printf "KERNEL==\"%s\", ENV{ID_CDROM}==\"?*\", SYMLINK+=\"fll-cdrom\"\n" \
    "${DEVNAME#/dev/}" >> ${FLL_ROOTFS_MNT}/etc/udev/rules.d/70-fll-live.rules

# Patch /etc/default/distro for custom username
sed -i "s#^FLL_LIVE_USER=.*#FLL_LIVE_USER=\"${FLL_LIVE_USER}\"#" \
    "${FLL_ROOTFS_MNT}/etc/default/distro"

# custom hostname given on cmdline
if [ "${CUSTOM_HOSTNAME}" ]; then
    echo "${CUSTOM_HOSTNAME}" > "${FLL_ROOTFS_MNT}/etc/hostname"
    echo "${CUSTOM_HOSTNAME}" > "${FLL_ROOTFS_MNT}/etc/mailname"
    # update /etc/hosts
    sed -i '/localhost/!s/^\(127.0.0.1[ \t]\+\)\(.\+\)$/\1'"${CUSTOM_HOSTNAME}"'/' \
        "${FLL_ROOTFS_MNT}/etc/hosts"
fi

# allow CUSTOM_TZ to override above TZ definitions
if [ -n "${CUSTOM_TZ}" ]; then
    case "${CUSTOM_TZ}" in
        utc|UTC)
            CUSTOM_TZ="Etc/UTC"
            ;;
    esac
    [ -f "${FLL_ROOTFS_MNT}/usr/share/zoneinfo/${CUSTOM_TZ}" ] && TZ="${CUSTOM_TZ}"
fi

# configure timezone, fallback to UTC
[ -f "${FLL_ROOTFS_MNT}/usr/share/zoneinfo/${TZ}" ] || TZ="Etc/UTC"
echo "configuring timezone data for '${TZ}'"
echo "${TZ}" > "${FLL_ROOTFS_MNT}/etc/timezone"
rm -f "${FLL_ROOTFS_MNT}/etc/localtime"
ln -sf "/usr/share/zoneinfo/${TZ}" "${FLL_ROOTFS_MNT}/etc/localtime"

# make localtime default, unless tz=Etc/UTC or utc=yes
if [ "${TZ}" = "Etc/UTC" ] || [ "${UTC}" = "yes" ]; then
    printf "0.000000 0 0.000000\n0\nUTC\n" > "${FLL_ROOTFS_MNT}/etc/adjtime"
else
    # debian defaults to UTC=yes, which is rumored to be dual-boot unfriendly
    printf "0.000000 0 0.000000\n0\nLOCAL\n" > "${FLL_ROOTFS_MNT}/etc/adjtime"
fi

# configure live getty configuration for systemd
if [ -r "${FLL_ROOTFS_MNT}/lib/systemd/system/getty@.service" ]; then
    sed -e 's#^ExecStart=.*#ExecStart=-/sbin/agetty --noclear -n -i -l /usr/bin/fll_login %I 38400 linux#' \
        "${FLL_ROOTFS_MNT}/lib/systemd/system/getty@.service" > \
        "${FLL_ROOTFS_MNT}/etc/systemd/system/getty@.service"
    ln -fs /etc/systemd/system/getty@.service \
        "${FLL_ROOTFS_MNT}/etc/systemd/system/getty.target.wants/getty@tty1.service"
    ln -fs getty@.service "${FLL_ROOTFS_MNT}/etc/systemd/system/autovt@.service"
fi

# success
exit 0
